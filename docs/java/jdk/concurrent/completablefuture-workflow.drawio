<mxfile host="Electron" modified="2024-02-17T10:11:46.598Z" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/21.7.5 Chrome/114.0.5735.289 Electron/25.8.1 Safari/537.36" etag="GvaoMJRFOe5lrCgamtqI" version="21.7.5" type="device">
  <diagram name="第 1 页" id="1pW2kvjGfipRLgd_ogxb">
    <mxGraphModel dx="-2471" dy="632" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-1" value="&lt;h1 style=&quot;font-size: 16px;&quot;&gt;&lt;font style=&quot;font-size: 16px;&quot;&gt;CompletableFuture 工作原理&lt;/font&gt;&lt;/h1&gt;&lt;div style=&quot;font-size: 10px;&quot;&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;这里主要看任务编排原理，主要是理清数据结构。&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 10px;&quot;&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 10px;&quot;&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;测试代码： java-async/asy&lt;/font&gt;&lt;font style=&quot;font-size: 10px;&quot;&gt;nc-future/src/main/java/top.kwseeker.async.future.jdAsyncTool.ThreadExhaustionTest.java&lt;br&gt;这个测试研究使用CompletableFuture默认的ForkJoinPool，为何不会因为线程被同步等待的任务占尽导致任务超时？&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 10px;&quot;&gt;看源码发现，同步等待结果阶段(get()), 可能会通过ForkJoinPool.managedBlock(q)&lt;b&gt;突破并行度的限制创建额外的工作者线程&lt;/b&gt;。&lt;/div&gt;&lt;div style=&quot;font-size: 11px;&quot;&gt;&lt;font style=&quot;font-size: 11px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="5000" y="20" width="760" height="100" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-4" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;fontSize=10;" parent="1" source="Jc6cqmUtGkEXaGz-iM8d-2" target="Jc6cqmUtGkEXaGz-iM8d-3" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-6" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;fontSize=10;" parent="1" source="Jc6cqmUtGkEXaGz-iM8d-2" target="Jc6cqmUtGkEXaGz-iM8d-5" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-2" value="CompletableFuture&amp;lt;Void&amp;gt; future = CompletableFuture.&lt;b style=&quot;font-size: 10px;&quot;&gt;runAsync&lt;/b&gt;(() -&amp;gt; head.work(forkJoinPool), forkJoinPool);" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="5000" y="260" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-9" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;fontSize=10;" parent="1" source="Jc6cqmUtGkEXaGz-iM8d-3" target="Jc6cqmUtGkEXaGz-iM8d-8" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-3" value="return &lt;b&gt;asyncRunStage&lt;/b&gt;(&lt;br&gt;screenExecutor(executor), runnable);" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;" parent="1" vertex="1">
          <mxGeometry x="5240" y="260" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-5" value="future.get();" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="5000" y="420" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-7" value="CompletableFuture" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontSize=10;" parent="1" vertex="1">
          <mxGeometry x="5285" y="230" width="110" height="30" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-11" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;fontSize=10;" parent="1" source="Jc6cqmUtGkEXaGz-iM8d-8" target="Jc6cqmUtGkEXaGz-iM8d-10" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-8" value="CompletableFuture&amp;lt;Void&amp;gt; d = new CompletableFuture&amp;lt;Void&amp;gt;();" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;" parent="1" vertex="1">
          <mxGeometry x="5480" y="260" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-33" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="Jc6cqmUtGkEXaGz-iM8d-10" target="Jc6cqmUtGkEXaGz-iM8d-32" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-10" value="e.&lt;b&gt;execute&lt;/b&gt;(new &lt;b&gt;AsyncRun&lt;/b&gt;(d, f));&lt;br style=&quot;font-size: 10px;&quot;&gt;return d;&lt;br&gt;&lt;font style=&quot;font-size: 9px;&quot; color=&quot;#007fff&quot;&gt;将任务业务逻辑封装成AsyncRun任务是ForJoinTask的子类，提交给ForkJoinPool执行&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="5480" y="340" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-19" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;dashed=1;endArrow=block;endFill=1;" parent="1" source="Jc6cqmUtGkEXaGz-iM8d-12" target="Jc6cqmUtGkEXaGz-iM8d-17" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-20" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;dashed=1;endArrow=block;endFill=1;" parent="1" source="Jc6cqmUtGkEXaGz-iM8d-12" target="Jc6cqmUtGkEXaGz-iM8d-18" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-12" value="&lt;p style=&quot;margin: 4px 0px 0px; text-align: center; font-size: 10px;&quot;&gt;&lt;span style=&quot;background-color: initial; font-size: 10px;&quot;&gt;&lt;b&gt;CompletableFuture&lt;/b&gt;&amp;lt;T&amp;gt; implements Future&amp;lt;T&amp;gt;, CompletionStage&amp;lt;T&amp;gt;&lt;/span&gt;&lt;br style=&quot;font-size: 10px;&quot;&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;span style=&quot;color: rgb(0, 127, 255); background-color: initial;&quot;&gt;//AltResult封装异常结果&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;static final AltResult NIL = new AltResult(null);&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//是否使用ForkJoinPool commonPool实现，并行度大于1就使用commonPool&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;private static final boolean useCommonPool = (ForkJoinPool.getCommonPoolParallelism() &amp;gt; 1);&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//CF默认使用的线程池&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;private static final Executor &lt;b&gt;asyncPool&lt;/b&gt; = useCommonPool ?&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&amp;nbsp; &amp;nbsp; ForkJoinPool.&lt;b&gt;commonPool&lt;/b&gt;() : new ThreadPerTaskExecutor();&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;static final int SYNC&amp;nbsp; &amp;nbsp;=&amp;nbsp; 0;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;static final int ASYNC&amp;nbsp; =&amp;nbsp; 1;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;static final int NESTED = -1;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;private static final int SPINS = (Runtime.getRuntime().availableProcessors() &amp;gt; 1 ? 1 &amp;lt;&amp;lt; 8 : 0);&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;private static final sun.misc.Unsafe UNSAFE;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;private static final long RESULT;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;private static final long STACK;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;private static final long NEXT;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//Either the result or boxed AltResult&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//存储执行结果&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;volatile Object &lt;b&gt;result&lt;/b&gt;;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//Completion是依赖的任务，通过链表组成栈结构，stack指向栈顶任务&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//即每个CompletableFuture内部包含一个任务栈&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;volatile &lt;/span&gt;&lt;b style=&quot;background-color: initial;&quot;&gt;Completion&lt;/b&gt;&lt;span style=&quot;background-color: initial;&quot;&gt; &lt;/span&gt;&lt;b style=&quot;background-color: initial;&quot;&gt;stack&lt;/b&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px; font-size: 10px;&quot;&gt;&lt;br&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=10;fontFamily=Helvetica;html=1;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="4480" y="240" width="440" height="360" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-17" value="&lt;p style=&quot;margin: 4px 0px 0px; text-align: center;&quot;&gt;Future&amp;lt;V&amp;gt;&lt;br style=&quot;font-size: 10px;&quot;&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;同步等待读取异步处理结果的接口&lt;/font&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=10;fontFamily=Helvetica;html=1;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="4720" y="160" width="200" height="40" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-18" value="&lt;p style=&quot;margin: 4px 0px 0px; text-align: center;&quot;&gt;CompletionStage&amp;lt;T&amp;gt;&lt;br style=&quot;font-size: 10px;&quot;&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;任务编排接口实现&lt;/font&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=10;fontFamily=Helvetica;html=1;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="4480" y="160" width="200" height="40" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-27" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="Jc6cqmUtGkEXaGz-iM8d-25" target="Jc6cqmUtGkEXaGz-iM8d-26" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-28" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="Jc6cqmUtGkEXaGz-iM8d-25" target="Jc6cqmUtGkEXaGz-iM8d-2" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="5100" y="260" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-25" value="测试初始化" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;" parent="1" vertex="1">
          <mxGeometry x="5000" y="160" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-26" value="static final ExecutorService forkJoinPool = new ForkJoinPool(2);&lt;br&gt;&lt;font color=&quot;#007fff&quot;&gt;参考 forkjoinpool 的工作流程图&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="5240" y="160" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-31" value="&lt;p style=&quot;margin: 4px 0px 0px; text-align: center;&quot;&gt;&lt;b&gt;AsyncRun&lt;/b&gt;&amp;nbsp;extends ForkJoinTask&amp;lt;Void&amp;gt;&lt;br&gt;implements Runnable, AsynchronousCompletionTask&lt;br style=&quot;font-size: 10px;&quot;&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;封装了CompletableFuture的ForkJoinTask，实现很简单只是在ForkJoinTask基础上对run()后添加了completeNull() completeThrowable() postComplete() 等操作&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CompletableFuture&amp;lt;Void&amp;gt; &lt;b&gt;dep&lt;/b&gt;;&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//任务的业务方法&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;Runnable &lt;b&gt;fn&lt;/b&gt;;&lt;br&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px; font-size: 10px;&quot;&gt;&lt;br&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=10;fontFamily=Helvetica;html=1;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="4000" y="240" width="440" height="160" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-2" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="Jc6cqmUtGkEXaGz-iM8d-32" target="sVAW3ZzdPzbu4NNdgHBk-1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-3" value="&lt;font color=&quot;#007fff&quot;&gt;参考ForkJoinPool的流程图&lt;/font&gt;" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];" vertex="1" connectable="0" parent="sVAW3ZzdPzbu4NNdgHBk-2">
          <mxGeometry x="-0.0643" y="-2" relative="1" as="geometry">
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="Jc6cqmUtGkEXaGz-iM8d-32" value="ForkJoinPool#&lt;b&gt;execute&lt;/b&gt;(Runnable task)&lt;br&gt;&lt;font color=&quot;#007fff&quot;&gt;这里task是AsyncRun实例&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="5720" y="340" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-5" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-1" target="sVAW3ZzdPzbu4NNdgHBk-4">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-1" value="CompletableFuture#&lt;b&gt;run&lt;/b&gt;()" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;" vertex="1" parent="1">
          <mxGeometry x="6200" y="340" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-8" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-4" target="sVAW3ZzdPzbu4NNdgHBk-7">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-4" value="&lt;div&gt;if (d.result == null) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; f.&lt;b&gt;run&lt;/b&gt;(); &lt;font color=&quot;#007fff&quot;&gt;//执行自定义任务&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; d.&lt;b&gt;completeNull&lt;/b&gt;();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } catch (Throwable ex) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; d.completeThrowable(ex);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div style=&quot;&quot;&gt;d.&lt;b&gt;postComplete&lt;/b&gt;();&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;align=left;arcSize=5;" vertex="1" parent="1">
          <mxGeometry x="6440" y="310" width="200" height="120" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-6" value="&lt;font color=&quot;#007fff&quot;&gt;任务会被提交到ForkJoinPool偶数工作队列&lt;br&gt;然后唤醒线程偷取任务执行&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
          <mxGeometry x="5930" y="383" width="250" height="40" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-10" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-7" target="sVAW3ZzdPzbu4NNdgHBk-9">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="6820" y="450" />
              <mxPoint x="5820" y="450" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-7" value="&lt;div&gt;CompletableFuture&amp;lt;?&amp;gt;[] futures =&amp;nbsp;&lt;/div&gt;&lt;div&gt;new CompletableFuture[next.size()];&lt;/div&gt;&lt;div&gt;for (int i = 0; i &amp;lt; next.size(); i++) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Task task = next.get(i);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; CompletableFuture&amp;lt;Void&amp;gt; future = CompletableFuture&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;b&gt;runAsync&lt;/b&gt;(() -&amp;gt; task.work(executor), executor);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; futures[i] = future;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;任务里面提交新任务&lt;/font&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;align=left;arcSize=5;" vertex="1" parent="1">
          <mxGeometry x="6680" y="310" width="280" height="120" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-12" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-9" target="sVAW3ZzdPzbu4NNdgHBk-11">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-25" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-9" target="sVAW3ZzdPzbu4NNdgHBk-27">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="5960" y="830" as="targetPoint" />
            <Array as="points">
              <mxPoint x="5940" y="610" />
              <mxPoint x="5940" y="830" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-9" value="CompletableFuture.&lt;b&gt;allOf&lt;/b&gt;(futures)&lt;br&gt;.&lt;b&gt;get&lt;/b&gt;();&lt;br&gt;&lt;font color=&quot;#007fff&quot;&gt;阻塞等待提交的所有新任务执行完毕&lt;br&gt;会阻塞当前工作者线程&lt;br&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;align=center;arcSize=13;fillColor=#ffe6cc;strokeColor=#d79b00;" vertex="1" parent="1">
          <mxGeometry x="5720" y="580" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-14" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-11" target="sVAW3ZzdPzbu4NNdgHBk-13">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-11" value="return andTree(cfs, 0, cfs.length - 1);&lt;br&gt;&lt;font color=&quot;#007fff&quot;&gt;递归构建Completion树，返回新建的CompletableFuture&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;align=center;arcSize=13;" vertex="1" parent="1">
          <mxGeometry x="5960" y="580" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-13" value="&lt;div&gt;static CompletableFuture&amp;lt;Void&amp;gt; andTree(CompletableFuture&amp;lt;?&amp;gt;[] cfs,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int lo, int hi) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; CompletableFuture&amp;lt;Void&amp;gt; d = new CompletableFuture&amp;lt;Void&amp;gt;();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (lo &amp;gt; hi) // empty&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; d.result = NIL;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; CompletableFuture&amp;lt;?&amp;gt; a, b;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int mid = (lo + hi) &amp;gt;&amp;gt;&amp;gt; 1;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if ((a = (&lt;b&gt;lo == mid&lt;/b&gt; ? cfs[lo] :&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;andTree&lt;/b&gt;(cfs, lo, mid))) == null ||&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (b = (lo == hi ? a : (&lt;b&gt;hi == mid+1&lt;/b&gt;) ? cfs[hi] :&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;andTree&lt;/b&gt;(cfs, mid+1, hi)))&amp;nbsp; == null)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; throw new NullPointerException();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (!d.&lt;b&gt;biRelay&lt;/b&gt;(a, b)) {&lt;font color=&quot;#007fff&quot;&gt; //a,b都已经执行完毕且当前CF result为空会返回true&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BiRelay&amp;lt;?,?&amp;gt; c = new &lt;b&gt;BiRelay&lt;/b&gt;&amp;lt;&amp;gt;(d, a, b);&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;nbsp; &amp;nbsp; //将c推送到a、b的栈顶位置，方法较简单不细讲了&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; a.&lt;b&gt;bipush&lt;/b&gt;(b, c);&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &lt;font color=&quot;#007fff&quot;&gt;//&lt;/font&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; c.&lt;b&gt;tryFire&lt;/b&gt;(SYNC);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return d;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;relay: 是中继的意思&lt;/font&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;align=left;arcSize=2;" vertex="1" parent="1">
          <mxGeometry x="6200" y="460" width="320" height="300" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-16" value="&lt;font color=&quot;#007fff&quot; style=&quot;font-size: 10px;&quot;&gt;比如有4个CompletableFuture,&amp;nbsp;&lt;br&gt;第一层递归拆分2个 andTree(0,1) andTree(2,3)&lt;br&gt;第二层判断 d.biRelay(cfs[0], cfs[1]) d.biRelay(cfs[2], cfs[3])&amp;nbsp;&lt;br&gt;创建 BiRelay&lt;br&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="6530" y="520" width="270" height="150" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-23" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;endArrow=block;endFill=0;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-17" target="sVAW3ZzdPzbu4NNdgHBk-21">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-17" value="&lt;p style=&quot;margin: 4px 0px 0px; text-align: center;&quot;&gt;&lt;b&gt;BiCompletion&lt;/b&gt;&lt;b style=&quot;background-color: initial;&quot;&gt;&amp;lt;T,U,Void&amp;gt;&lt;/b&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;A Completion for an action with two sources&lt;/font&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;b&gt;snd&lt;/b&gt;;&amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px; font-size: 10px;&quot;&gt;&lt;br&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=10;fontFamily=Helvetica;html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="4000" y="800" width="440" height="100" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-19" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;endArrow=block;endFill=0;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-18" target="sVAW3ZzdPzbu4NNdgHBk-17">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-18" value="&lt;p style=&quot;margin: 4px 0px 0px; text-align: center;&quot;&gt;&lt;b&gt;BiRelay&amp;lt;T,U&amp;gt;&lt;/b&gt;&lt;br style=&quot;font-size: 10px;&quot;&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//本质是实现ForkJoinTask的exec方法&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;final CompletableFuture&amp;lt;Void&amp;gt; &lt;b&gt;tryFire&lt;/b&gt;(int mode)&lt;br&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=10;fontFamily=Helvetica;html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="4000" y="960" width="440" height="80" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-20" value="&lt;p style=&quot;margin: 4px 0px 0px; text-align: center;&quot;&gt;&lt;b&gt;Completion &lt;/b&gt;extends ForkJoinTask&amp;lt;Void&amp;gt;&amp;nbsp;&lt;br&gt;implements Runnable, AsynchronousCompletionTask&lt;br&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;Completion本质就是一个ForkJoinTask&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//指向栈中的下一个元素，即用链表实现的栈&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;volatile Completion &lt;b&gt;next&lt;/b&gt;;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;abstract CompletableFuture&amp;lt;?&amp;gt; &lt;b&gt;tryFire&lt;/b&gt;(int mode);&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;abstract boolean &lt;b&gt;isLive&lt;/b&gt;();&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;public final void run()&amp;nbsp; { tryFire(ASYNC); }&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;public final boolean &lt;b&gt;exec&lt;/b&gt;() { tryFire(ASYNC); return true; }&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;public final Void getRawResult()&amp;nbsp; { return null; }&lt;br&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=10;fontFamily=Helvetica;html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="4000" y="440" width="440" height="160" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-22" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;endArrow=block;endFill=0;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-21" target="sVAW3ZzdPzbu4NNdgHBk-20">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-21" value="&lt;p style=&quot;margin: 4px 0px 0px; text-align: center;&quot;&gt;&lt;b&gt;UniCompletion&amp;lt;T,V&amp;gt;&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;A Completion with a source, dependent, and executor.&lt;/font&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;Executor &lt;b&gt;executor&lt;/b&gt;;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// executor to use (null if none)&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;CompletableFuture&amp;lt;V&amp;gt; &lt;b&gt;dep&lt;/b&gt;;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // the dependent to complete&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;CompletableFuture&amp;lt;T&amp;gt; &lt;b&gt;src&lt;/b&gt;;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // source for action&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px; font-size: 10px;&quot;&gt;&lt;br&gt;&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=10;fontFamily=Helvetica;html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="4000" y="640" width="440" height="120" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-26" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-27" target="sVAW3ZzdPzbu4NNdgHBk-28">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-27" value="return reportGet((r = result) == null ? &lt;b&gt;waitingGet&lt;/b&gt;(true) : r);" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;" vertex="1" parent="1">
          <mxGeometry x="5960" y="800" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-33" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-28" target="sVAW3ZzdPzbu4NNdgHBk-32">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-28" value="CompletableFuture#&lt;br&gt;&lt;b&gt;waitingGet&lt;/b&gt;(boolean interruptible)&lt;br&gt;&lt;font color=&quot;#007fff&quot;&gt;自旋等待result写入结果&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;" vertex="1" parent="1">
          <mxGeometry x="6200" y="800" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-31" value="&lt;p style=&quot;margin: 4px 0px 0px; text-align: center;&quot;&gt;&lt;b&gt;Signaller &lt;/b&gt;extends Completion&lt;/p&gt;&lt;p style=&quot;margin: 4px 0px 0px; text-align: center;&quot;&gt;implements ForkJoinPool.ManagedBlocker&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;b&gt;实现了ManagedBlocker用于避免阻塞操作在ForkJoinPool中堆积引起饥饿，&lt;/b&gt;signaller是“信号员”的意思，感觉不太契合它的功能。&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//指向栈中的下一个元素，即用链表实现的栈&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;long &lt;b&gt;nanos&lt;/b&gt;;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // wait time if timed&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;final long &lt;b&gt;deadline&lt;/b&gt;;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// non-zero if timed&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;volatile int &lt;b&gt;interruptControl&lt;/b&gt;; // &amp;gt; 0: interruptible, &amp;lt; 0: interrupted&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//初始为当前线程&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;volatile Thread &lt;b&gt;thread&lt;/b&gt;;&lt;/p&gt;&lt;hr style=&quot;font-size: 10px;&quot;&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//thread不为空就唤醒线程&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;final CompletableFuture&amp;lt;?&amp;gt; &lt;b&gt;tryFire&lt;/b&gt;(int ignore)&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//任务是否可以被释放，thread为空、线程被中断、deadline超时都可以释放&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;public boolean isReleasable()&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//任务还不可以被释放的情况下，就挂起当前线程，被唤醒后再返回是否可以被释放&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;public boolean block()&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;&lt;font color=&quot;#007fff&quot;&gt;//thread是否非空&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin: 0px 0px 0px 4px;&quot;&gt;final boolean isLive()&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=10;fontFamily=Helvetica;html=1;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="4480" y="640" width="440" height="280" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-36" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-32" target="sVAW3ZzdPzbu4NNdgHBk-35">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-32" value="&lt;div&gt;private Object &lt;b&gt;waitingGet&lt;/b&gt;(boolean interruptible) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Signaller q = null;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; boolean queued = false;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; int spins = -1;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Object r;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;while&lt;/b&gt; ((r = result) == null) {&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#007fff&quot;&gt;//1 自旋等待&lt;/font&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (spins &amp;lt; 0)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; spins = SPINS;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else if (spins &amp;gt; 0) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (ThreadLocalRandom.nextSecondarySeed() &amp;gt;= 0)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --spins;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;//2 创建Signaller并推送到当前等待的CF的栈顶&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else if (q == null)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; q = new &lt;b&gt;Signaller&lt;/b&gt;(interruptible, 0L, 0L);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else if (!queued)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queued = tryPushStack(q);&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;//3 如果Signaller被中断，执行清理操作&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else if (interruptible &amp;amp;&amp;amp; q.&lt;b&gt;interruptControl&lt;/b&gt; &amp;lt; 0) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; q.thread = null;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cleanStack();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return null;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;//4 注释说：运行可能阻塞的任务q&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else if (q.thread != null &amp;amp;&amp;amp; result == null) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;//主要就是封装阻塞，拓展功能：可以避免因为阻塞导致工作者线程被占尽&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ForkJoinPool.&lt;b&gt;managedBlock&lt;/b&gt;(q);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } catch (InterruptedException ie) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; q.interruptControl = -1;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (q != null) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; q.thread = null;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (q.interruptControl &amp;lt; 0) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (interruptible)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; r = null; // report interruption&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Thread.currentThread().interrupt();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; postComplete();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return r;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;arcSize=2;align=left;" vertex="1" parent="1">
          <mxGeometry x="6440" y="800" width="280" height="580" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-39" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=1;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="sVAW3ZzdPzbu4NNdgHBk-35" target="sVAW3ZzdPzbu4NNdgHBk-38">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-35" value="&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;//managedBlock() 即将阻塞条件封装了起来并提供了补偿处理&lt;/font&gt;&lt;/div&gt;&lt;div&gt;public static void &lt;b&gt;managedBlock&lt;/b&gt;(ManagedBlocker blocker)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; throws InterruptedException {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ForkJoinPool p;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ForkJoinWorkerThread wt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Thread t = Thread.currentThread();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if ((t instanceof ForkJoinWorkerThread) &amp;amp;&amp;amp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (p = (wt = (ForkJoinWorkerThread)t).pool) != null) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; WorkQueue &lt;b&gt;w&lt;/b&gt; = wt.workQueue;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; while (!blocker.isReleasable()) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (p.&lt;b&gt;tryCompensate&lt;/b&gt;(w)) { &lt;font color=&quot;#007fff&quot;&gt;//最主要的是里面可能创建额外的工作者线程&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;nbsp; &amp;nbsp; //当前任务不可释放就进入等待，被唤醒后如果仍不可释放就继续等待&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; do {} while (!blocker.isReleasable() &amp;amp;&amp;amp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; !blocker.&lt;b&gt;block&lt;/b&gt;());&lt;font color=&quot;#007fff&quot;&gt;&amp;nbsp;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } finally {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; U.getAndAddLong(p, CTL, AC_UNIT);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; do {} while (!blocker.isReleasable() &amp;amp;&amp;amp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; !blocker.&lt;b&gt;block&lt;/b&gt;());&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;arcSize=2;align=left;" vertex="1" parent="1">
          <mxGeometry x="6760" y="800" width="280" height="360" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-37" value="ForkJoinPool" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
          <mxGeometry x="6855" y="770" width="90" height="30" as="geometry" />
        </mxCell>
        <mxCell id="sVAW3ZzdPzbu4NNdgHBk-38" value="&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;//尝试缩减活动线程数量，可能释放或创建一个补偿线程&lt;/font&gt;&lt;/div&gt;&lt;div&gt;private boolean &lt;b&gt;tryCompensate&lt;/b&gt;(WorkQueue w) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; boolean canBlock;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; WorkQueue[] ws; long c; int m, pc, sp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (w == null || w.qlock &amp;lt; 0 ||&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// caller terminating&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (ws = workQueues) == null || (m = ws.length - 1) &amp;lt;= 0 ||&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (pc = config &amp;amp; SMASK) == 0)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// parallelism disabled&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; canBlock = false;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; else if ((sp = (int)(c = ctl)) != 0)&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;font color=&quot;#007fff&quot;&gt;// 存在空闲的线程，释放空闲的线程&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; canBlock = &lt;b&gt;tryRelease&lt;/b&gt;(c, ws[sp &amp;amp; m], 0L);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; else {&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;//pc是并行度&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int &lt;b&gt;ac&lt;/b&gt; = (int)(c &amp;gt;&amp;gt; AC_SHIFT) + pc;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int &lt;b&gt;tc&lt;/b&gt; = (short)(c &amp;gt;&amp;gt; TC_SHIFT) + pc; &lt;font color=&quot;#007fff&quot;&gt;&lt;b&gt;//TC段是“-并行度”,再+pc即实际已经创建的工作者线程数量&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int &lt;b&gt;nbusy&lt;/b&gt; = 0;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // validate saturation&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;//遍历奇数索引的工作队列（即与线程绑定的工作队列），统计处于繁忙状态（即正在执行任务）的工作队列的数量&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for (int i = 0; i &amp;lt;= m; ++i) {&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // two passes of odd indices&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; WorkQueue v;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if ((v = ws[((i &amp;lt;&amp;lt; 1) | 1) &amp;amp; m]) != null) {&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#007fff&quot;&gt;//只统计奇数索引的队列，每个统计两次&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if ((v.scanState &amp;amp; SCANNING) != 0)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ++nbusy;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#007fff&quot;&gt;//繁忙状态，统计+1&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#007fff&quot;&gt;//&lt;b&gt;如果 nbusy == tc&amp;lt;&amp;lt;1, 说明所有工作者线程都繁忙&lt;/b&gt;&lt;/font&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (nbusy != (tc &amp;lt;&amp;lt; 1) || ctl != c)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; canBlock = false;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// unstable or stale&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;//所有工作者线程都繁忙且实际线程数量已经超出并行度限制&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else if (tc &amp;gt;= pc &amp;amp;&amp;amp; ac &amp;gt; 1 &amp;amp;&amp;amp; w.isEmpty()) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; long nc = ((AC_MASK &amp;amp; (c - AC_UNIT)) |&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (~AC_MASK &amp;amp; c));&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// uncompensated, &lt;font color=&quot;#007fff&quot;&gt;AC段“-1”&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; canBlock = U.compareAndSwapLong(this, CTL, c, nc);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#007fff&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;//超出最大线程数量&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else if (tc &amp;gt;= MAX_CAP ||&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (this == common &amp;amp;&amp;amp; tc &amp;gt;= pc + commonMaxSpares))&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; throw new RejectedExecutionException(&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;Thread limit exceeded replacing blocked worker&quot;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else {&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#007fff&quot;&gt;// similar to tryAddWorker，&lt;b&gt;突破并行度限制继续创建线程&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; boolean add = false; int rs;&amp;nbsp; &amp;nbsp; &amp;nbsp; // CAS within lock&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; long nc = ((AC_MASK &amp;amp; c) |&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (TC_MASK &amp;amp; (c + TC_UNIT)));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (((rs = lockRunState()) &amp;amp; STOP) == 0)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; add = U.compareAndSwapLong(this, CTL, c, nc);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; unlockRunState(rs, rs &amp;amp; ~RSLOCK);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; canBlock = add &amp;amp;&amp;amp; &lt;b&gt;createWorker&lt;/b&gt;(); &lt;font color=&quot;#007fff&quot;&gt;//！！！&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return canBlock;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;arcSize=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="7080" y="800" width="360" height="640" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
